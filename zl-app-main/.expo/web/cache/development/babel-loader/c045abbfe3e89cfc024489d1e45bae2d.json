{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mabelsmith/Desktop/KWK/RR/zl-app-main/App.js\";\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { Component, useState, useEffect } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport logo from \"./assets/zl_logo.png\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nvar Root = createStackNavigator();\n\nvar Login = function Login(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Image, {\n    source: logo,\n    style: {\n      width: 205,\n      height: 159\n    }\n  }), React.createElement(Text, {\n    style: {\n      color: '#FFFFFF',\n      fontSize: 18\n    }\n  }, \"Login\"), React.createElement(StatusBar, {\n    style: \"auto\"\n  }), React.createElement(View, {\n    style: styles.ButtonLogin\n  }, React.createElement(Button, {\n    color: \"#000000\",\n    title: \"Sign in with Google\",\n    onPress: function onPress() {\n      return Auth.federatedSignIn({\n        provider: \"Google\"\n      });\n    }\n  }), React.createElement(View, {\n    style: styles.space\n  }), React.createElement(Button, {\n    color: \"#000000\",\n    title: \"Sign in with Facebook\",\n    onPress: function onPress() {\n      return Auth.federatedSignIn({\n        provider: \"Facebook\"\n      });\n    }\n  }), React.createElement(View, {\n    style: styles.space\n  }), React.createElement(Button, {\n    color: \"#000000\",\n    title: \"Launch Hosted UI\",\n    onPress: function onPress() {\n      return Auth.federatedSignIn();\n    }\n  })));\n};\n\nimport Amplify from 'aws-amplify';\nimport config from \"./aws-exports\";\nimport SignIn from \"./aws_screens/SignIn\";\nimport SignUp from \"./aws_screens/SignUp\";\nimport ConfirmSignUp from \"./aws_screens/ConfirmSignUp\";\nimport Home from \"./aws_screens/Home\";\nAmplify.configure(config);\nimport { withAuthenticator } from 'aws-amplify-react-native';\nimport { Auth } from 'aws-amplify';\nvar AuthenticationStack = createStackNavigator();\nvar AppStack = createStackNavigator();\n\nvar AuthenticationNavigator = function AuthenticationNavigator(props) {\n  return React.createElement(AuthenticationStack.Navigator, {\n    headerMode: \"none\"\n  }, React.createElement(AuthenticationStack.Screen, {\n    name: \"SignIn\"\n  }, function (screenProps) {\n    return React.createElement(SignIn, _extends({}, screenProps, {\n      updateAuthState: props.updateAuthState\n    }));\n  }), React.createElement(AuthenticationStack.Screen, {\n    name: \"SignUp\",\n    component: SignUp\n  }), React.createElement(AuthenticationStack.Screen, {\n    name: \"ConfirmSignUp\",\n    component: ConfirmSignUp\n  }));\n};\n\nvar AppNavigator = function AppNavigator(props) {\n  return React.createElement(AppStack.Navigator, null, React.createElement(AppStack.Screen, {\n    name: \"Zon Loopt Home\"\n  }, function (screenProps) {\n    return React.createElement(Home, _extends({}, screenProps, {\n      updateAuthState: props.updateAuthState\n    }));\n  }));\n};\n\nvar Initializing = function Initializing() {\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"tomato\"\n  }), React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Image, {\n    source: logo,\n    style: {\n      width: 205,\n      height: 159\n    }\n  }), React.createElement(Text, {\n    style: {\n      color: '#FFFFFF',\n      fontSize: 18\n    }\n  }, \"ZON LOOPT\"), React.createElement(Text, {\n    style: {\n      color: '#FFFFFF',\n      fontSize: 10\n    }\n  }, \"Running Routes\"), React.createElement(StatusBar, {\n    style: \"auto\"\n  })));\n};\n\nfunction App() {\n  var _useState = useState('initializing'),\n      _useState2 = _slicedToArray(_useState, 2),\n      isUserLoggedIn = _useState2[0],\n      setUserLoggedIn = _useState2[1];\n\n  useEffect(function () {\n    checkAuthState();\n  }, []);\n\n  function checkAuthState() {\n    return _regeneratorRuntime.async(function checkAuthState$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 3:\n            console.log('<img draggable=\"false\" class=\"emoji\" alt=\"✅\" src=\"https://s.w.org/images/core/emoji/11/svg/2705.svg\"> User is signed in');\n            setUserLoggedIn('loggedIn');\n            _context.next = 11;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log('<img draggable=\"false\" class=\"emoji\" alt=\"❌\" src=\"https://s.w.org/images/core/emoji/11/svg/274c.svg\"> User is not signed in');\n            setUserLoggedIn('loggedOut');\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  }\n\n  function updateAuthState(isUserLoggedIn) {\n    setUserLoggedIn(isUserLoggedIn);\n  }\n\n  return React.createElement(NavigationContainer, null, isUserLoggedIn === 'initializing' && React.createElement(Initializing, null), isUserLoggedIn === 'loggedIn' && React.createElement(AppNavigator, {\n    updateAuthState: updateAuthState\n  }), isUserLoggedIn === 'loggedOut' && React.createElement(AuthenticationNavigator, {\n    updateAuthState: updateAuthState\n  }));\n}\n\nexport default withAuthenticator(App);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000000',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  ButtonLogin: {\n    backgroundColor: '#FFFFFF',\n    borderColor: '#FFFFFF',\n    borderWidth: 5,\n    borderRadius: 8,\n    marginVertical: 45,\n    width: Dimensions.get(\"window\").width * .5,\n    display: \"flex\",\n    justifyContent: \"space-evenly\",\n    alignItems: \"center\",\n    padding: 1\n  },\n  space: {\n    width: 20,\n    height: 20\n  },\n  text: {\n    color: 'white'\n  }\n});","map":{"version":3,"sources":["/Users/mabelsmith/Desktop/KWK/RR/zl-app-main/App.js"],"names":["StatusBar","React","Component","useState","useEffect","logo","createStackNavigator","NavigationContainer","createBottomTabNavigator","Root","Login","navigation","route","styles","container","width","height","color","fontSize","ButtonLogin","Auth","federatedSignIn","provider","space","Amplify","config","SignIn","SignUp","ConfirmSignUp","Home","configure","withAuthenticator","AuthenticationStack","AppStack","AuthenticationNavigator","props","screenProps","updateAuthState","AppNavigator","Initializing","flex","justifyContent","alignItems","App","isUserLoggedIn","setUserLoggedIn","checkAuthState","currentAuthenticatedUser","console","log","StyleSheet","create","backgroundColor","borderColor","borderWidth","borderRadius","marginVertical","Dimensions","get","display","padding","text"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, {Component, useState, useEffect} from 'react';\nimport { Button, Image, StyleSheet, Text, View, Dimensions, ActivityIndicator} from 'react-native';\nimport logo from './assets/zl_logo.png';\n\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nconst Root = createStackNavigator()\n\n//SPLASH SCREEN\n// import * as SplashScreen from 'expo-splash-screen';\n\n// export default class App extends React.Component {\n//   state = {\n//     appIsReady: false,\n//   };\n//\n//   async componentDidMount() {\n//     // Prevent native splash screen from autohiding\n//     try {\n//       await SplashScreen.preventAutoHideAsync();\n//     } catch (e) {\n//       console.warn(e);\n//     }\n//     this.prepareResources();\n//   }\n//\n//   /**\n//    * Method that serves to load resources and make API calls\n//    */\n//   prepareResources = async () => {\n//     try {\n//       await performAPICalls();\n//       await downloadAssets();\n//     } catch (e) {\n//       console.warn(e);\n//     } finally {\n//       this.setState({ appIsReady: true }, async () => {\n//         await SplashScreen.hideAsync();\n//       });\n//     }\n//   };\n//\n//   render() {\n//     if (!this.state.appIsReady) {\n//       return null;\n//     }\n//\n//     return (\n//       <View style={styles.container}>\n//           <Image source={logo} style={{ width: 205, height: 159 }} />\n//           <Text style={{color: '#FFFFFF', fontSize: 35}}>\n//             ZON LOOPT\n//           </Text>\n//           <Text style= {{color: '#FFFFFF', fontSize: 20}}>\n//             Running Routes\n//           </Text>\n//           <View style = {styles.ButtonLogin}>\n//           <Button\n//             color=\"#000000\"\n//             title='Login'\n//             onPress={() => {navigation.push('Login')}} />\n//             </View>\n//           <StatusBar style=\"auto\" />\n//     </View>\n//     );\n//   }\n// }\n\n// Put any code you need to prepare your app in these functions\n// async function performAPICalls() {}\n// async function downloadAssets() {}\n\nconst Login = ({ navigation, route }) => (\n  <View style={styles.container}>\n      <Image source={logo} style={{ width: 205, height: 159 }} />\n      <Text style={{color: '#FFFFFF', fontSize: 18}}>\n        Login\n      </Text>\n      <StatusBar style=\"auto\" />\n      <View style = {styles.ButtonLogin}>\n      <Button\n        color=\"#000000\"\n        title=\"Sign in with Google\"\n        onPress={() => Auth.federatedSignIn({ provider: \"Google\" })}\n      />\n\n      <View style={styles.space} />\n      <Button\n        color=\"#000000\"\n        title=\"Sign in with Facebook\"\n        onPress={() => Auth.federatedSignIn({ provider: \"Facebook\" })}\n      />\n\n      <View style={styles.space} />\n      <Button\n        color=\"#000000\"\n        title=\"Launch Hosted UI\"\n        onPress={() => Auth.federatedSignIn()}\n      />\n      </View>\n  </View>\n)\n\n//AWS Login Screen & user authentication\nimport Amplify from 'aws-amplify';\nimport config from './aws-exports';\n\nimport SignIn from './aws_screens/SignIn';\nimport SignUp from './aws_screens/SignUp';\nimport ConfirmSignUp from './aws_screens/ConfirmSignUp';\nimport Home from './aws_screens/Home';\n\nAmplify.configure(config);\n\nimport { withAuthenticator } from 'aws-amplify-react-native';\nimport { Auth } from 'aws-amplify';\n\nconst AuthenticationStack = createStackNavigator();\nconst AppStack = createStackNavigator();\n\nconst AuthenticationNavigator = props => {\n  return (\n    <AuthenticationStack.Navigator headerMode=\"none\">\n      <AuthenticationStack.Screen name=\"SignIn\">\n        {screenProps => (\n          <SignIn {...screenProps} updateAuthState={props.updateAuthState} />\n        )}\n      </AuthenticationStack.Screen>\n      <AuthenticationStack.Screen name=\"SignUp\" component={SignUp} />\n      <AuthenticationStack.Screen\n        name=\"ConfirmSignUp\"\n        component={ConfirmSignUp}\n      />\n    </AuthenticationStack.Navigator>\n  );\n};\n\nconst AppNavigator = props => {\n  return (\n    <AppStack.Navigator>\n      <AppStack.Screen name=\"Zon Loopt Home\">\n        {screenProps => (\n          <Home {...screenProps} updateAuthState={props.updateAuthState} />\n        )}\n      </AppStack.Screen>\n    </AppStack.Navigator>\n  );\n};\n\nconst Initializing = () => {\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <ActivityIndicator size=\"large\" color=\"tomato\" />\n      <View style={styles.container}>\n        <Image source={logo} style={{ width: 205, height: 159 }} />\n        <Text style={{color: '#FFFFFF', fontSize: 18}}>\n          ZON LOOPT\n        </Text>\n        <Text style= {{color: '#FFFFFF', fontSize: 10}}>\n          Running Routes\n        </Text>\n        <StatusBar style=\"auto\" />\n      </View>\n    </View>\n  );\n};\n\n/*\nimport landing from './pages/landing'\nimport login from './pages/login'\nimport join from './pages/join'\n\n\nimport {createStackNavigator} from 'react-navigation';\n\nconst RootStack = createStackNavigator({\n  landing: Landing,\n  login: Login,\n  join: Join,\n\n})\n*/\n\n\nfunction App() {\n  const [isUserLoggedIn, setUserLoggedIn] = useState('initializing');\n  useEffect(() => {\n    checkAuthState();\n  }, []);\n  async function checkAuthState() {\n    try {\n      await Auth.currentAuthenticatedUser();\n      console.log('<img draggable=\"false\" class=\"emoji\" alt=\"✅\" src=\"https://s.w.org/images/core/emoji/11/svg/2705.svg\"> User is signed in');\n      setUserLoggedIn('loggedIn');\n    } catch (err) {\n      console.log('<img draggable=\"false\" class=\"emoji\" alt=\"❌\" src=\"https://s.w.org/images/core/emoji/11/svg/274c.svg\"> User is not signed in');\n      setUserLoggedIn('loggedOut');\n    }\n  }\n  function updateAuthState(isUserLoggedIn) {\n    setUserLoggedIn(isUserLoggedIn);\n  }\n\n  // async function signOut() {\n  //   try {\n  //     await Auth.signOut();\n  //   } catch (error) {\n  //     console.log('Error signing out: ', error);\n  //   }\n  // }\n\n  return (\n    <NavigationContainer>\n        {isUserLoggedIn === 'initializing' && <Initializing />}\n        {isUserLoggedIn === 'loggedIn' && (\n          <AppNavigator updateAuthState={updateAuthState} />\n        )}\n        {isUserLoggedIn === 'loggedOut' && (\n          <AuthenticationNavigator updateAuthState={updateAuthState} />\n        )}\n      </NavigationContainer>\n    // <NavigationContainer>\n    //   <Root.Navigator>\n    //     <Root.Screen name=\"Landing\" component={Landing} />\n    //     <Root.Screen name=\"Login\" component={Login} />\n    //     <Root.Screen name=\"Home\" component={Home} />\n    //   </Root.Navigator>\n    // </NavigationContainer>\n\n    );\n}\n\nexport default withAuthenticator(App);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000000',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  ButtonLogin: {\n      backgroundColor: '#FFFFFF',\n      borderColor: '#FFFFFF',\n      borderWidth: 5,\n      borderRadius: 8,\n      marginVertical: 45,\n      width:Dimensions.get(\"window\").width * .5,\n      display:\"flex\",\n      justifyContent:\"space-evenly\",\n      alignItems: \"center\",\n      padding: 1,\n   },\n   space: {\n    width: 20, // or whatever size you need\n    height: 20,\n  },\n  text: {\n    color: 'white'\n  }\n});\n"]},"metadata":{},"sourceType":"module"}